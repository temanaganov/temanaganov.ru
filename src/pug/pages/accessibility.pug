extends ../extends/layout

block head
	link(rel="stylesheet", href="styles/article.css")
	title Доступность

block body
	main
		h1 Доступность

		h2 Удобство чтения
		p Чрезвычайно важно, чтобы текстовое содержимое было удобочитаемо. Если посетители не могут прочитать содержимое веб-страницы, они не могут взаимодействовать с ней, а это приведёт к тому, что они просто покинут сайт.

		h3 Цветовой контраст
		p Создаваемый нами дизайн должен обеспечивать достаточный контраст между текстом и фоном, чтобы быть достаточно разборчивым. Высокая контрастность хороша как для людей с ограничениями зрения, так и без них.
		p Существует много примеров, когда посетители не могут отчетливо рассмотреть содержимое сайта. Они могут быть дальтониками, не способными отличить цвет текста и фона страницы (1 из 12 мужчин и 1 из 200 женщин европейского происхождения). Возможно пользователь просто читает текст при ярком солнечном освещении, создавая на экране множество бликов, значительно ухудшая видимость. Или может это просто пожилой человек с ослабленным зрением, не способным различать цвета так же хорошо, как раньше.
		p В итоге, чтобы быть уверенным, что ваш сайт удобочитаем в этих условиях, важно, чтобы цвет текста был достаточно контрастным по отношению к фону.
		p Два цвета контрастируют, когда они из разных сегментов цветового круга. Проще говоря, чем больше разница между двумя цветами, тем выше контраст. Для нас, веб-дизайнеров и разработчиков, речь идет не только о контрасте, но и о том, как хорошо он работает применительно к тексту. Контраст между текстом и его фоном должен быть настолько высоким, чтобы его могли читать люди с довольно низким зрением.

		h4 Минимальный коэффициент контрастности
		p Коэффициент контрастности показывает, насколько высока контрастность текста в определенных размерах и ширинах на определенном фоне. Соотношение может варьироваться от #[code 1:1] до #[code 21:1]. Где #[code 1:1], если оба цвета совпадают, а #[code 21:1], если используются черные и белые цвета.
		p Согласно Руководству по доступности контента в вебе (WCAG) 2.0, мы должны соблюдать коэффициент контрастности не ниже #[code 4.5:1] между фоном и текстом (или картинкой и текстом). Это применимо к тексту, если его размер меньше #[code 24px] (если не жирный) и меньше #[code 19px] (если жирный). Для текста большего размера достаточно коэффициента #[code 3:1]. Это минимальные цифры для соблюдения требований уровня АА. Для уровня ААА минимальный коэффициент контрастности #[code 7:1] (для нормального текста) и #[code 4.5:1] (для жирного текста).

		h3 Увеличение размера шрифта
		p Были времена, когда размер шрифта в #[code 12px] для основного текста был нормой, но с ростом количества девайсов с высоким разрешением размер шрифта на какое-то время устаканился в районе #[code 15–18px]. За последние годы он подрос до #[code 20px] и более, что вполне неплохо. Текст должен быть достаточно большим для чтения со смартфона. И должен расти с размерами экрана для того, чтобы читаться с большой дистанции на больших экранах, таких, как телевизор.
		p Поскольку характеристики шрифтов могут сильно отличаться, нет смысла договариваться о каком-то стандартном минимальном размере, но #[code 18–20px] прекрасно подойдут в качестве отправной точки для маленьких экранов.

		h4 Настройка высоты линии
		p Высота строки по умолчанию в браузерах составляет примерно #[code 1.2]. Согласно рекомендации Руководства по доступности веб-контента #[code line-height] должен быть не меньше #[code 1.5] в абзацах внутри блоков текста.
		p Текст в абзаце с правильно подобранной высотой строки не только лучше читается, но и выглядит аккуратнее.

		h4 Выравнивание текста по правому или левому краю
		p Несмотря на то, что некоторые из нас предпочитают распределенный текст выровненному по правому или левому краю (мол, он выглядит приятнее), это считается плохой практикой. #[code text-align: justify] изменяет расстояние между словами для создания строк одинаковой длины. Эти неравномерные отступы могут ухудшить читабельность текста и попросту отвлекать. Перенос слов в случае необходимости может быть неплохим решением, но перенос в CSS плохо поддерживается и может работать не так, как ожидалось.

		h4 Ограничение ширины абзаца
		p Согласно нескольким источникам, дизайнеры должны стремиться к ширине строки в 45 — 85 символов, поскольку предполагаемая комфортная ширина равна 65 символам.
		p При определении ширины текстового блока может пригодиться единица #[code ch], поскольку #[code 1ch] равен ширине символа ноль (0). И он меняет свои размеры при изменении значений #[code font-family] и #[code font-size].
		p Если вы используете отзывчивую типографику, то не забудьте протестировать свой сайт на больших экранах. Если не установлена верхняя граница размера шрифта, то ваш текст может стать нечитабельным при определенном размере вьюпорта.

		h3 Зум и масштабирование страниц
		p Использование разборчивого размера шрифта и достаточной области нажатия помогает пользователям читать текст и взаимодействовать с сайтом. Но даже те сайты, которые в точности следуют упомянутым рекомендациям, не могут полностью соответствовать определённым индивидуальным потребностям каждого посетителя. Вот почему такие специальные функции устройств, как зум и масштабирование с помощью щипка, очень важны: они позволяют пользователям подстроить вашу страницу под свои потребности. Или в ситуации крайне недоступных сайтов, использующих маленькие шрифты и кнопки, это всё же даёт пользователям возможность взаимодействовать с элементами страницы.
		p Существуют редкие примеры, когда отключение возможности масштабирования является приемлемым. Например, когда рассматриваемая страница представляет собой веб-игру, использующую сенсорное управление. Если в этой ситуации оставить возможность масштабирования, устройства игроков будут увеличивать и уменьшать масштаб каждый раз, когда игрок дважды нажмёт на экран, по иронии, делая этот подход недоступным.
		p Поэтому разработчики учитывают возможность отключать эту функцию путём установки одного из двух следующих свойств во viewport мета-теге:
		ol
			li #[code user-scalable] устанавливают в значение #[code 0] или #[code no]
			li #[code maximum-scale] устанавливают в значение #[code 1] или #[code 1.0]
		p К сожалению, разработчики слишком часто этим злоупотребляли, что почти на каждом третьем сайте в мобильной версии отключена эту функция, а Apple (начиная с iOS 10) больше не позволяет разработчикам отключать возможность зума. Мобильный браузер Safari игнорирует этот тег. Все сайты, не важно какие, можно масштабировать с помощью зума на новых iOS устройствах.

		h3 Определение языка
		p Сеть полна удивительного контента. Однако, тут есть подвох: в мире существует более 1000 разных языков и содержимое, которое вы ищете, может быть доступно не на том языке, которым владеете. В последние годы мы существенно продвинулись в технологиях перевода и вы, вероятно, использовали одну из них (например, Google Translate).
		p Для того, чтобы облегчить эту возможность, технологии перевода должны знать, на каком языке написан текст на ваших страницах. Это осуществляется с помощью атрибута #[code lang]. Без него компьютеры вынуждены угадывать это. Как вы могли догадаться, это ведёт к большому количеству ошибок, особенно когда страницы являются мультиязычными (например, навигация вашей страницы на английском, а содержимое статьи на японском).
		p В еще большей степени эта проблема заметна при использовании технологий синтезаторов речи, таких как экранные читалки, которые пытаются читать текст на языке, установленном по умолчанию пользователем, если на сайте иной язык указан не был.
		p Из нашего анализа следует, что на 26,13% страниц не указан язык с помощью атрибута #[code lang]. Это делает эту четверть всех страниц потенциально подверженными проблемам, описанным выше. Хорошей новостью является то, что среди сайтов, использующих атрибут #[code lang], 99,68% указывают правильное значение языка страницы.

		h3 Отвлекающее содержимое
		p Некоторые пользователи, например имеющие когнитивные расстройства, испытывают трудности с концентрацией внимания на одной задаче в течение длительного времени. Эти пользователи не хотят иметь дело с сайтами, содержащими большое количество динамических и анимированных элементов, особенно когда эти эффекты присутствуют исключительно для красоты и не относятся к выполняемой задаче. Как минимум, таким пользователям нужна возможность отключить всю отвлекающую анимацию.
		p К сожалению, полученные нами данные свидетельствуют о том, что в интернете достаточно распространены элементы с бесконечно повторяющейся анимацией: 21,04% страниц применяют её с помощью CSS-свойств бесконечной анимации или с помощью элементов #[code &lt;marquee&gt;] и #[code &lt;blink&gt;].
		p Однако примечательным является то, что причиной большинства этих явлений являются несколько популярных сторонних CSS-библиотек, которые по умолчанию настроены на бесконечное зацикленное воспроизведение анимации.

		h2 Медиаэлементы в вебе

		h3 Альтернативный текст у изображений
		p Изображения являются важной составляющей современного веба. Они могут рассказывать интересные истории, привлекать внимание и вызывать эмоции. Но не все могут видеть эти изображения. К счастью, в 1995 году HTML версии 2.0 предоставил решение этой проблемы — атрибут #[code alt]. Он предоставляет веб-разработчикам возможность добавления текстового описания изображений, которые мы используем, поэтому когда кто-то не может увидеть это изображение (или изображение не загрузилось), остаётся возможность прочитать альтернативный текст описания.
		p Несмотря на то, что атрибут #[code alt] был внедрён 25 лет назад, на 49,91% он всё еще не используется для некоторых изображений, а на 8,68% страниц он не встречается вообще.

		h3 Подписи к аудио и видео
		p Насколько изображения хороши в плане рассказа историй, настолько же аудио и видео контент хорош в привлечении внимания и выражении идей. Когда аудио и видео не подписано, пользователи, которые по какой-то причине в данный момент не могут прослушать его, теряют немалую часть сути материала. Именно о необходимости включать подписи для аудио и видео мы чаще всего слышим жалобы от глухих или слабослышащих людей.
		p Из всего списка сайтов, использующих теги #[code &lt;audio&gt;] или #[code &lt;video&gt;], только 0,54% добавляют подписи (критерием измерения было наличие элемента #[code &lt;track&gt;]).

		h2 Удобство навигации по странице
		p Когда вы открываете меню в ресторане, первое, что вы, вероятно, делаете, — прочитываете заголовки разделов: закуски, салаты, основные блюда, десерты. Это позволяет вам быстро исследовать меню на предмет возможных вариантов, после чего сразу же перейти к интересующим блюдам. Точно так же, когда посетитель открывает веб-страницу, его цель заключается в том, чтобы найти информацию, в которой он наиболее заинтересован — основную причину, по которой он пришел на страницу. Для того, чтобы помочь пользователям найти интересующее их содержимое как можно быстрее (и уберечь их от нажатия на кнопку «назад»), мы пытаемся разделить содержимое наших страниц на несколько визуально различимых секций. Например, шапка сайта для навигации, различные заголовки в статье, чтобы пользователи могли быстро пробежаться по ним глазами, футер для дополнительной информации.
		p Хотя это исключительно важно, мы должны позаботиться о разметке страниц, чтобы устройства посетителей смогли правильно распознать эти отдельные секции. Почему? Хотя большинство читателей используют мышь для навигации по страницам, существует немалая часть пользователей, полагающихся на клавиатуры и экранные читалки. Корректность работы этих устройств в большей степени зависит от того, насколько хорошо оно распознало разметку страницы.

		h3 Заголовки
		p Заголовки полезны не только с визуальной точки зрения, но также особенно важны и для экранных читалок. Они позволяют экранным читалкам быстро переходить от раздела к разделу и указывать, где заканчивается один раздел и начинается следующий.
		p Чтобы не запутывать пользователей скринридеров, убедитесь, что не пропускаете уровни заголовков. Например, не перепрыгивайте с #[code h1] сразу на #[code h3], пропуская #[code h2]. Почему это важно? Потому что это неожиданное изменение может вынудить пользователей скринридера думать, что они пропустили часть содержимого. Это может привести к тому, что они начнут искать часть содержимого, которое могли пропустить, даже если на самом деле это не так. В дополнение к этому, вы только поможете читателям, если будете придерживаться единого стиля.
		p С учетом сказанного, мы получили следующие результаты:
		ol
			li 89.36% страниц хоть как-то используют заголовки
			li 38.6% страниц пропускают уровни заголовков
			li Странно, но заголовки #[code h2] встречаются чаще, чем #[code h1]

		h3 Указатель «основного» содержимого &lt;main&gt;
		p Указатель «основного» содержимого #[code &lt;main&gt;] помогает экранным читалкам определить, где начинается основное содержимое веб-страницы, чтобы пользователи могли сразу перейти к нему. Без этого пользователи скринридеров вынуждены каждый раз вручную проходить через все разделы навигации при переходе на очередную страницу сайта. Очевидно, это весьма утомительно.
		p Мы определили, что только одна из четырех (26.03%) страниц содержит этот указатель. И что удивительно, 8,06% страниц ошибочно содержали больше одного главного указателя, вынуждая своих пользователей угадывать, какой из указателей отражает действительно главный контент.

		h3 Секционные HTML-элементы
		p С тех пор, как в 2008 году был представлен HTML5, а в 2014 стал официальным стандартом, появилось множество HTML-элементов, помогающих компьютерам и скринридерам понимать разметку и структуру веб-страницы.
		p Такие элементы, как #[code &lt;header&gt;], #[code &lt;footer&gt;], #[code &lt;nav&gt;] и #[code &lt;main&gt;] указывают, в какой части располагается определённый тип содержимого и позволяет пользователям быстро перемещаться по странице. Они широко используются при разработке, причем большинство из них используется на более чем 50% страниц (тег #[code &lt;main&gt;] является исключением).
		p Другие теги, такие как #[code &lt;article&gt;], #[code &lt;hr&gt;] и #[code &lt;aside&gt;] помогают пользователям в понимании основного содержимого страницы. Например, сообщает, где заканчивается одна статья и начинается другая. Эти элементы используются не так часто. Каждый имеет показатель на уровне 20%. Они не являются неотъемлемой частью страницы, так что это не обязательно является тревожным сигналом.
		p Все эти элементы разработаны, прежде всего, для улучшения доступности и никак визуально не выделяются, что значит что вы можете заменять ими используемые в данный момент элементы, не опасаясь непредвиденных последствий.

		h3 Другие навигационные HTML-элементы
		p Многие популярные скринридеры позволяют пользователям быстро перемещаться по содержащимся на странице ссылкам, спискам, элементам списков, фреймам и полям форм, таким как кнопки, радиокнопки, чекбоксы.

		h4 Ссылки «пропустить»
		p Ссылки «пропустить» — это ссылки, размещённые вверху страницы и позволяющие скринридерам или пользователям, использующим только клавиатуру, переместиться прямо к основному содержимому. Они позволяют пропустить все навигационные ссылки и меню вверху страницы. Добавление ссылок «перейти к главному» или «пропустить» на ваши веб страницы, очень помогает пользователям, использующим только клавиатуру. В большинстве случаев, такие пользователи не хотят прыгать по всем ссылкам меню навигации, прежде чем смогут начать читать содержимое. Это особенно актуально, когда они просматривают более одной страницы вашего сайта. Только представьте, без ссылки для пропуска навигации, они должны проходить одни и те же навигационные ссылки, что и на главной странице каждый раз. Это не похоже на особо интересное занятие.
		p Если вам интересно посмотреть, как работает такая ссылка, просто произведите в Google поиск чего-либо и на странице результатов нажмите #[code Tab]. Появится скрытая до этого ссылка.
		p Чтобы создать рабочую ссылку для пропуска навигации, вам необходимо привязать её к основному контенту с использованием HTML атрибутов #[code id] и #[code href] следующим образом:
		pre
			code
				| &lt;a class="skip-main" href="#main"&gt;Skip to main content&lt;/a&gt;
				| &lt;nav&gt;Navigation&lt;/nav&gt;
				| &lt;main&gt; id="main" tabindex="-1"&gt;Main content&lt;/main&gt;
		p Вам также необходимо добавить атрибут #[code tabindex="-1»] в контейнер основного содержимого. Это тот же самый #[code tabindex], который мы использовали раньше, чтобы сделать нестандартную кнопку с фокусом. Атрибут #[code tabindex] используется для изменения порядка навигации по умолчанию. При значении #[code 0] он делает не фокусируемые элементы фокусируемыми. При значении #[code -1] он так же делает элементы фокусируемыми, но они становятся недоступными для обычной навигации с клавиатуры. Для некоторых браузеров, таких как Chrome и IE, требуется наличие #[code tabindex="-1»] на том, куда ведет ссылка для пропуска навигации, поэтому никогда не пренебрегайте этим.

		h3 Горячие клавиши
		p Горячие клавиши, устанавливаемые через #[code aria-keyshortcuts] или атрибуты #[code accesskey], могут быть использованы одним из двух способов:
		ol
			li Активация элемента на странице подобно ссылке или кнопке
			li Фокус на определённом элементе страницы. Например, перемещение фокуса на определённое поле ввода на странице позволяет пользователю сразу после этого начать печатать
		p В результате нашего исследования можно сделать вывод, что атрибут aria-keyshortcuts практически не используется, так как встретился только на 159 сайтах из более чем 4 миллионов. Атрибут #[code accesskey] используется чаще — на 2,47% страниц (1.74% на мобильных версиях сайтов). Мы склоняемся к мнению, что его более частое использование на десктопных версиях сайтов обусловлено тем, что разработчики считают, что на мобильные версии сайтов пользователи заходят только с устройств с сенсорными экранами и не используют клавиатуру.
		p Особенно неожиданным был тот факт, что 15,56% мобильных и 13,03% десктопных сайтов, которые используют горячие клавиши, назначают одни и те же сочетания для разных элементов. Это значит, что браузер вынужден угадывать, какому именно из элементов должно принадлежать определенное сочетание клавиш.

		h3 Фокус
		p Крайне важно убедиться в том, что навигация по вашему сайту возможна при помощи клавиатуры. Очень многие люди используют клавиатуру при серфинге. Среди них пользователи с ограничениями моторно-двигательных функций, слепые люди и люди без рук — все те, кто по любым причинам не может пользоваться мышкой или трекпадом.
		p Навигация по сайту при помощи клавиатуры означает, что можно передвигаться от одного фоксируемого элемента к другому в том порядке, в котором они расположены в DOM. Обычно используется #[code Tab] для движения вперед или #[code Shift + Tab] для движения назад. Фокусируемыми элементами являются ссылки, кнопки и элементы формы, но не только. Они могут быть активированы при помощи #[code Enter] и, иногда, при помощи пробела. Будучи фокусируемыми и выбираемыми, эти элементы обладают очень полезным дефолтным функционалом. Поэтому так важно использовать правильные семантичные элементы и писать HTML в логическом порядке.
		p Есть пара вещей, которые вы можете сделать в CSS, чтобы стилизовать элементы, находящиеся в фокусе.
		p Вы можете выделить элементы в фокусе при помощи стилей для псевдокласса #[code :focus].
		p У браузеров нет единой точки зрения на стили для элементов в фокусе. Такие стили часто уродливые и не очень хорошо сочетаются с вашим дизайном. Рекомендуется предусмотреть индивидуальные стили фокусировки, которые улучшают пользовательский интерфейс и соответствуют вашему дизайну.
		p Что бы вы ни делали, никогда просто не удаляйте обводку #[code outline], отображающуюся по умолчанию (пунктирная линия, синее или оранжевое кольцо), не предоставляя альтернативные стили. Пользователи, которые используют клавиатуру в качестве основного способа навигации, не смогут использовать ваш сайт, если не будут знать, где находится фокус в данный момент. Это не просто пожелание. Это требование уровня AA.

		h4 Разница между пользователем с клавиатурой и с мышью
		p Как уже упоминалось, одна из вещей, которая расстраивает дизайнеров, заключается в том, что не существует единых кроссбраузерных стилей по умолчанию для элементов в фокусе. Другой причиной для разочарования является то, что стили фокуса видны при клике мышью на некоторые элементы. Иногда нет необходимости показывать эти стили, это может отвлекать пользователей с мышью. И просто некрасиво.
		p Удалить свойство #[code outline] — не вариант, поскольку элемент больше не будет доступен для пользователей с клавиатурой. Мы должны разделить стили для пользователей с мышью и пользователей с клавиатурой. Это возможно при помощи псевдокласса #[code :focus-visible] (поддерживается не всеми браузерами). «Псевдокласс #[code :focus-visible] срабатывает в тех же случаях, когда и пседокласс #[code :focus], но при этом компьютер эвристически определяет, что фокус специально установлен на этом элементе» (проще говоря, псевдокласс #[code :focus-visible] срабатывает в случаях навигации по странице без мыши).

		h4 Стили элемента при фокусе на дочерних элементах
		p #[code :focus-within] — относительно новый псевдокласс и уже поддерживается в большинстве основных браузеров. Он выбирает элемент с дочерними элементами, которые в настоящее время в фокусе.

		h4 Делайте нефокусируемые элементы доступными для фокуса
		p Элементы типа #[code &lt;p&gt;], #[code &lt;h2&gt;] или #[code &lt;div&gt;] не попадают в фокус по умолчанию. Мы часто используем эти теги для создания компонентов, работающих при помощи JavaScript. Это может усложнить жизнь пользователям с одной лишь клавиатурой.
		p Возможно превратить элемент из недоступного для фокуса в доступный при помощи добавления атрибута #[code tabindex] с целым числом в качестве значения. Если значение будет #[code 0], то элемент станет доступным для фокуса и выбора с клавиатуры.
		p Если значением будет отрицательное число, то на элементе можно будет сфокусироваться (например, при помощи JavaScript), но добраться до него с клавиатуры не получится. Вы теоретически можете использовать значения больше #[code 0], но эту нарушит естественный порядок переключения между элементами, что считается анти-паттерном.

		h4 Модальное окно
		p Если использовать клавишу #[code Tab] для фокусировки на кнопке и нажать #[code Enter], на экране появится модальное окно. Если вы снова нажмете #[code Tab], то фокус переместится на следующую за кнопкой ссылку, которая находится под модальным окном. Пользователь же ожидает, что фокус переместится внутрь всплывающего окна. Но это не так, поскольку элементы попадают в фокус в том порядке, в котором они расположены в DOM, а модальное окно расположено в самом низу документа.
		p Чтобы исправить эту ситуацию, вы должны сделать модальное окно доступным для фокусировки, а затем сфокусироваться на нем при помощи JavaScript.
		pre
			code
				| &lt;!-- Добавим tabindex="0" --&gt;
				| &lt;div class="modal" id="modal" tabindex="0"&gt;
				|   ...
				| &lt;/div&gt;
		pre
			code
				| // Используем метод focus() для установки фокуса
				| function showModal() {
				|   ...
				|   var modal = document.getElementById('modal');
				|   modal.focus();
				|   ...
				| }
		p Если вы закрываете модальное окно, нажав #[code Esc], то фокус будет потерян. В идеале, фокус должен вернуться к кнопке, где и был до того, как открылось модальное окно. Для этого вам нужно сохранить последний сфокусированный элемент в переменной.
		p #[code document.activeElement] содержит текущий элемент в фокусе.
		pre
			code
				| // Переменная для хранения последнего элемента в фокусе
				| var lastFocusedElement;
				| function showModal() {
				|   ...
				|   // Сохраняем последний элемент в фокусе
				|   lastFocusedElement = document.activeElement;
				|   var modal = document.getElementById(modalID);
				|   modal.focus();
				|   ...
				| }
		p Теперь, когда у нас есть ссылка на кнопку, мы можем снова сфокусироваться на нее, когда модальное окно закроется.
		pre
			code
				| function removeModal() {
				|   ...
				|   // Возвращаем фокус на последний элемент в фокусе
				|   lastFocusedElement.focus();
				|   ...
				| }
		p При открытии окна рекомендуется держать фокус в его пределах. В данный момент пользователь все еще может выйти за его пределы, нажимая #[code Tab].
		p Вот #[a(href="modal.html") пример реализации] модального окна с так называемой клавиатурной ловушкой. Фокус будет оставаться в пределах модального окна до тех пор, пока оно открыто.

		h3 Таблицы
		p Таблицы являются одним из основных способов организации и представления больших объёмов данных. Многие вспомогательные технологии, такие как скринридеры и свитчеры (которые могут быть полезны пользователям с нарушениями моторики), могут иметь специальные функции, позволяющие им более эффективно перемещаться по табличным данным.

		h4 Заголовки
		p В зависимости от особенностей структуры конкретной таблицы, использование заголовков таблицы упрощает чтение по колонкам и строкам без потери контекста того, на какие данные ссылается эта конкретная колонка или строка. Для пользователей скринридеров перемещение по таблице, лишённой заголовков строк и столбцов, является непростой задачей. Это обусловлено тем, что пользователю экранной читалки трудно отслеживать своё текущее местонахождение в таблице без заголовков, особенно когда таблица достаточно большая.
		p Чтобы разметить табличные заголовки, просто используйте тег #[code &lt;th&gt;] (вместо #[code &lt;td&gt;]), или ARIA-роли #[code columnheader] или #[code rowheader]. Только на 24.5% страниц таблицы были размечены одним из указанных способов. Следовательно, на оставшихся трёх четвертях страниц разработчики разметили таблицы без заголовков, создав дополнительные сложности для пользователей скринридеров.
		p Использование тегов #[code &lt;th&gt;] и #[code &lt;td&gt;] было более распространённым методом для разметки заголовков таблицы. Роли #[code columnheader] и #[code rowheader] практически не используются: так как встретились всего на 677 сайтах (0.058%).

		h4 Подписи
		p Подписи к таблицам с помощью элемента #[code &lt;caption&gt;] полезны для предоставления большего описательного контекста для читателей всех типов. Подпись может подготовить читателя к восприятию информации, которую содержит таблица, а это может быть особенно полезным для людей, которые могут легко отвлекаться или прерываться. Они также полезны для людей, которые могут потеряться внутри большой таблицы, таких как пользователи скринридеров или кого-то с ограничениями в обучаемости или интеллекте. Чем проще для читателей понять, какие данные перед ними представлены, тем лучше.
		p Несмотря на это, только на 4,32% страниц таблицы имеют подпись.

		h2 Совместимость с вспомогательными технологиями

		h3 Использование ARIA
		p Одной из наиболее популярных и широко используемых спецификаций доступности в вебе является стандарт Accessible Rich Internet Applications (ARIA). Этот стандарт предлагает множество дополнительных HTML-атрибутов для обозначения роли элемента, несмотря на его визуальное представление (то есть, их семантическое значение), и на какие типы действий они рассчитаны.
		p Правильное использование ARIA может быть достаточно сложной задачей. Например, мы нашли 12,31% страниц, использующих неправильные значения для ARIA-атрибутов. Это актуальная проблема, ведь ошибки при использовании ARIA-атрибутов визуально никак не видны. Некоторые из этих ошибок могут быть обнаружены с использованием автоматических инструментов валидации, но обычно это всё же требует ручной проверки с использованием вспомогательных устройств (например, скринридеров). Этот раздел определяет, как ARIA используется в вебе и в частности, какая именно часть стандарта является наиболее распространённой.

		h3 Атрибут role
		p Атрибут #[code role] является наиболее важным во всей спецификации ARIA. Он используется для информирования браузера о предназначении данного HTML-элемента (то есть, о семантическом значении). Например, элемент, стилизованный через CSS как кнопка, должен получить ARIA-роль #[code button].
		p В настоящее время 46,91% страниц используют как минимум, ARIA-атрибут #[code role].

		h4 Обновление UI-фреймворков может стать способом увеличения доступности во всём вебе
		p Топ-5 ролей, все они появляются на 11% или более страниц и являются ролями-ориентирами. Они используются для помощи в навигации, а не для описания функциональности элементов, таких как выпадающий список. Это неожиданный результат, потому что основным мотивом ARIA было дать разработчикам возможность описывать функциональность элементов, сделанных из общих HTML-элементов (например, #[code &lt;div&gt;]).
		p Мы подозреваем, что некоторые из наиболее популярных UI-фреймворков включили роли навигации в свои шаблоны. Это объяснило бы широкую распространённость атрибутов-ориентиров. Если эта теория верна, обновление популярных UI-фреймворков с включением лучшей поддержки доступности может оказывать огромное влияние на доступность в вебе.
		p Другим результатом, указывающим на это заключение, является тот факт, что более «продвинутые», но не менее важные ARIA-атрибуты, похоже, не используются вовсе. Такие атрибуты не могу быть просто внедрены через UI-фреймворки, потому что они могут нуждаться в настройке, исходя из структуры и внешнего вида конкретного сайта. Например, мы обнаружили, что атрибуты #[code posinset] and #[code setsize] были использованы только на 0.01% страниц. Эти атрибуты сообщают пользователю скринридера, сколько элементов в списке меню и какой из них в данный момент выбран. Таким образом, если слабовидящий пользователь пытается перемещаться по меню, он должен услышать объявление, например: «Главная, 1 из 5», «Продукты, 2 из 5», «Загрузки, 3 из 5» и т. д.

		h4 Многие сайты пытаются делать модальные окна доступными
		p Роль #[code dialog] является относительно популярной, потому что сделать модальные окна доступными для скринридеров очень трудно. Именно поэтому очень впечатляет тот факт, что на 8% проанализированных страниц это всё же было сделано. Снова-таки, мы подозреваем, что этот показатель мог быть достигнут благодаря использованию каких-то определённых UI-фреймворков.

		h3 Текстовые метки у интерактивных элементов
		p Самый распространённый способ взаимодействия пользователя с сайтом — его элементы управления, такие как ссылки или кнопки. Тем не менее, пользователи скринридеров часто не знают, какое действие произведёт элемент, когда будет активирован. Часто эта путаница происходит из-за отсутствия у элементов текстовых меток. Например, кнопка, содержащая иконку стрелки, направленной влево, указывающей, что это кнопка «Назад», но не содержащая текстового описания этого.
		p Только около четверти (24.39%) страниц используют кнопки или ссылки, включающие текстовые метки. Если элемент не содержит такой текстовой метки, пользователь скринридера может прочитать что-то общее, например, слово «кнопка» вместо более конкретного «Поиск».
		p Кнопки и ссылки почти всегда можно выбрать с помощью кнопки #[code Tab] и поэтому имеют выделяющийся внешний вид. Навигация по сайту с помощью кнопки #[code Tab] является одним из основных способов, с помощью которого пользователи, использующие только клавиатуру, могут просматривать ваш сайт. Таким образом, пользователь обязательно столкнётся с непомеченными текстом кнопками и ссылками, если будет перемещаться по сайту кнопкой #[code Tab].

		h2 Доступность элементов формы
		p Заполнение форм — это задача, которую многие из нас выполняют каждый день. Независимо от того, делаем ли мы покупки, покупаем билет или отправляем резюме, формы являются основным способом передачи информацию веб-сайту. Из-за этого, обеспечение доступности форм невероятно важно. Самый простой способ достигнуть этого — каждому полю ввода указать названия через тег #[code &lt;label&gt;] или атрибуты #[code aria-label] или #[code aria-labelledby]. К сожалению, только на 22,33% страниц задаются названия для всех полей ввода форм, что значит, что 4 из 5 страниц имеют формы, которые трудно заполнить.

		h3 Указатели обязательного и неправильно заполненного поля
		p Когда мы встречаем поле с большой красной звёздочкой, мы знаем, что оно обязательно для заполнения. Или когда нажимаем «Отправить» и получаем сообщение, что введены неверные данные, все поля, подсвеченные другим цветом должны быть исправлены, а форма снова отправлена. Тем не менее, слабовидящие или слепые люди не могу полагаться на эти визуальные сигналы, именно поэтому так важны HTML-атрибут #[code required] или ARIA-атрибуты #[code aria-required] и #[code aria-invalid]. Они предоставляют скринридерам альтернативу красной звёздочки и подсветки полей. В виде приятного бонуса, когда вы сообщаете браузеру, какие поля являются обязательными, они своими силами, не прибегая к JavaScript, будут проверять корректность заполненных полей.
		p Из всех страниц, на которых присутствуют формы, 21,73% используют атрибуты #[code required] или #[code aria-required], когда размечают обязательные для заполнения поля. Только один из пяти сайтов использует это. Это простой шаг сделать ваш сайт доступным и разблокировать полезные браузерные функции для всех пользователей.
		p Мы также нашли 3,52% сайтов с формами, размеченными с использованием атрибута #[code aria-invalid]. Однако, поскольку их действие наступает только после отправки формы с неверно заполненными полями, мы не смогли определить точный процент сайтов, использующих их в разметке.

		h3 Дублирование id
		p #[code id] могут быть полезны в HTML для связывания двух элементов. Например, таким образом работает элемент #[code &lt;label&gt;]. Вы указываете #[code id] поля ввода, которое описывает данная метка и браузер связывает их. Что в результате? Теперь пользователи могут нажимать на эту метку для фокусировки на поле ввода, а скринридеры будут использовать её как описание.
		p К сожалению, на 34,62% сайтов встречается дублирование #[code id], что значит, что на многих сайтах #[code id], указанный пользователем, может ссылаться на несколько различных полей ввода. Таким образом, когда пользователь нажимает на метку для выделения поля ввода, в итоге он может получить фокус не на том элементе, который ожидал. Как вы можете себе представить, это может привести к особенно плачевным последствиям например, на странице оформления заказа в интернет-магазине.
		p Эта проблема даже больше выражена для скринридеров, потому что их пользователи могут быть неспособны визуально проверить, что именно выбрано. Кроме того, многие ARIA-атрибуты, такие как #[code aria-describedby] и #[code aria-labelledby], работают аналогично элементу #[code &lt;label&gt;], описанному выше. Таким образом, чтобы сделать ваш сайт доступным, удаление всех дубликатов #[code id] является хорошим первым шагом.

		h2 Ссылки
		ul
			li #[a(href="https://webref.ru/layout/advanced-html-css/semantics-accessibility") Продвинутая семантика и доступность]
			li #[a(href="https://medium.com/@ABatickaya/%D0%BF%D0%B8%D1%88%D0%B5%D0%BC-html-%D0%BD%D0%B5-%D0%B7%D0%B0%D0%B1%D1%8B%D0%B2%D0%B0%D1%8F-%D0%BE-%D0%B4%D0%BE%D1%81%D1%82%D1%83%D0%BF%D0%BD%D0%BE%D1%81%D1%82%D0%B8-9ffbf97ecbe7") Пишем HTML, не забывая о доступности (Перевод статьи Мануэля Матузовича)]
			li #[a(href="https://medium.com/@ABatickaya/%D0%B4%D1%83%D0%BC%D0%B0%D1%8F-%D0%BE-%D0%B4%D0%BE%D1%81%D1%82%D1%83%D0%BF%D0%BD%D0%BE%D1%81%D1%82%D0%B8-%D0%BF%D0%B8%D1%88%D0%B5%D0%BC-css-9032d7b64fb2") Пишем CSS, не забывая о доступности (Перевод статьи Мануэля Матузовича)]
			li #[a(href="https://medium.com/@ABatickaya/writing-javascript-with-accessibility-in-mind-84e94d927f3e") Пишем JavaScript, не забывая о доступности (Перевод статьи Мануэля Матузовича)]
			li #[a(href="https://yoksel.github.io/easy-markup/accessibility/") Простые правила разметки (yoksel)]
			li #[a(href="http://css.yoksel.ru/inaccessibility/") Недоступность в картинках (yoksel)]
			li #[a(href="https://inclusive-components.design/") Инклюзивные компоненты]
			li #[a(href="https://a11yresources.webflow.io/") a11yresources]
			li #[a(href="https://www.a11ymatters.com/") a11ymatters]

